Default Methods & Static Methods:
---------------------------------

    Until 1.7 version - every method present inside interface is always - public & abstract, whether we are declaring or not.
    -----------------        
        void m1();
        public void m1();
        abstarct void m1();
        public abstarct void m1();
            
    1.8 version:
    ------------
        Default methods and static methods are allowed.

    1.9 versio:
    -----------
        private methods are also allowed.

    Variables: 
    ----------
        Inside interface variables are always public / static / final

Default Method - Virtual Extention Method - Defender Method:
------------------------------------------------------------
    Need of default method.

        inetrface I{
            public void m1();
            public void m2();
            public void m3(); //new mthod added. But now code will not complie, bcz every implemntation class compulsory should provide implementation. Already m1 & m2 are implemented not m3, will give error.
            default void m4(){ System.out.println("Default Method"); }
        }
        class Test1 implements I {
            public void m1(){ }
            public void m2(){ }
        }
        Class Test2 implements I {
            public void m1(){ }
            public void m2(){ }
        }
        Class Test100 implements I {
            public void m1(){ }
            public void m2(){ }
        }
Any no of implementation of interface calling is possible.
Once interface is defined and its implemented with the method in other classes, then its not allowed to add a new mthod in the interface.
Without affecting implementation class, if we want to add new method, default method is use in interface. Then its upto us to use that default method or not. (Dummy implementation).
This is not a 'default modifier' bcz this method having default implementation.

    interface Inter {
        default void m1() { Syetm.out.println("Default Method"); }
    }
    class Test implements inter {
        @override
        public void m1()  { Syetm.out.println("Override Default Method"); } //we can also override the default methods, or we can also ignore it dependong upon the need.
        public void main(String[] args) {
        Test t = new Test();
        t.m1();
        }
    }
    default method can't be declare in the classes, bcz in class means different things like switch case default, default modifier etc. so we declare in in interface only.
    object class methods can't use in default methods -  java.lang.object methods like hashcode().
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Static Method:
--------------
    They are not nowhere related to class/object terminalogy.

        interface Inter {
            public static void m1() { Syetem.out.println("Static Method"); }
        }
        class Test implements inter {
            public static void main(String[] args) {
                Inter.m1(); // 1 way to call static methods -correct way**
                m1(); // 2 way to call static methods -incorrect way
                Test.m1(); // 3 way to call static methods -incorrect way
                Test t = new Test();
                    t.m1(); // 4 way to call static methods -incorrect way
            }
        }
Interface static methods by defaukt not availabke to implementation classes.
Only by using interface name ony we can call static interface methods.
We can also define main method in static method of interface.