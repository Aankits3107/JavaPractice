Exceptions
----------
Comes under throwable.
Throwable is not a interface but a class for exception handling.
It have two child classes - 1. Exception, 2, Error

                                                                Throwable
                                                        They are Partially Checked
----------------------------------------------------------------------------------------------------------------------------
Exception                                                                                                              Error
---------                                                                                                              -----
Exceptions are caused by code/program.                                                                                 Error are not caused by code/program.
Exceptions are recoverable (handling it).                                                                              Error are non-recoverable (can'r be handled ).
    use try catch.                                                                                                         Caused by lack of system resources. ie. not enough stack memory, network issue, VM error
Exceptions are partially checked, bcz its child classes few are checked few are unchecked.                             All errors are unchecked exceptions

RuntimeException                    IOException                 InterruptedException        RemoteException            VirtualMachineError        LinkageError    AssertionError      ExceptionInInitializerError
----------------                    -----------                 --------------------        ---------------            -------------------        ------------    --------------      ---------------------------
'Unchecked exception'               'Fully Checked exception'   'Fully Checked exception'   'Fully Checked exception'  StackOverFlowError         VerifyError
ArithmeticException                 EndOfFileException                                                                 OutOfMemoryError
NullPointerException                FileNotFoundException                                                              
ClassCachedException
IndexOutOfBoundException
    ArrayIndexOutofBoundException
    StringIndexOutOfBoundException
IllegalArgumentException
    NumberFormatException



Checked vs Unchecked Exception
------------------------------
Checked
-------
Checked exception have 'throws' keyword.
The exceptions which are checked by the compiler for smooth executiuon of the program at runtime. Whether the program is handling or not.
Except runtime exceptions all other exceptions are checked exception.

FileNotFoundException
---------------------
                        import java.io.*;
                        class Test {
                            public static void main(String[] args) {
                                PrintWriter pw = new PrintWriter("abc.txt");
                                pw.println("Hello");
                            }
                        }
error: unreported exception FileNotFoundException must be caught or declare to be thrown.
        at PrintWriter pw = new PrintWriter("abc.txt");
Use try catch or declare throws expetion in class.

IntruptedException
------------------
                    class Test {
                        public static void main(String[] args) {
                                System.out.println("I want to sleep peacefully");
                            Thread.sleep(1000); //every java program compulsary contain 1 thread. i.e. main thread.
                        }
                    }
If main thread entered into the spleep. Java give error. Because other threads will intrupt this.
error: unreported exception IntruptedException must be caught or declare to be thrown.
        at Thread.sleep(1000);


Unchecked
---------
Exceptions which are not checked by compiler.
Rearly occured exceptions.
All errors are unchecked exception, and runtime exceptions is also unchecked exception.

ArithmeticException
-------------------
                    class Test {
                        public static void main(String[] args) {
                            System.out.println(10/0);
                        }
                    }
error: Exception in thread 'main' java.lang.AirthmeticException: /by zero
        at Test.main(Test.java.5)



Partially Checked and Fully Checked Exception
---------------------------------------------
Throwables are Partially Checked Exception.
Exceptions are partially checked, because they are checked but some of its child are unchecked.
Partial Checked are those, whose child exceptions are unchecked.
Fully Checked are those whose parent class is checked and their child exceptions are also checked.



Control Flow in Try-Catch
-------------------------
                        statement-0;
                        try {
                            statement-1;
                            statement-2;
                            statement-3;
                        }
                        catch(exception e) {
                            statement-4
                        }
                        statement-5;
case-1 If there is no exception. All the statements will excecute normally except catch block.
            Because no exception raised no need for catch.
case-2 If as exception raised at statement-2 and corresponding catch block matched, statement 4 is executed.
            Because after a exception catch block is executed and after that try block don't execute again, the remaining code will execute after the catch.
case-3 If an exception raised at statement-2 and corresponding catch block not matched. 
            Program will stop abnormally as no handler is present.
case-4 If an exception raised at catch block or after it.
            Beacuse its not part of a try catch block, it is as abnormal termination, program will stop.             



Methods to print exceptions information
---------------------------------------
                                    class Test {
                                        public static void main(String[] args) {
                                            try {
                                                System.out.println(10/0);
                                            }
                                            catch(ArithmeticException e) {
                                                e.printStackTrace();
                                                // System.out.println(e);
                                                // System.out.println(e.toString);
                                                // System.out.println(e.getMessage());
                                            }
                                        }
                                    }
1. e.printStackTrace()
----------------------
This will tell the name of exception folloewed by it's discription and the stak trace of the error.
By default this is used. By the dfault exception handler.
It has print statement internally so no need for system.out.println.

2. e.toString() or e
--------------------
This will give only name & discription for the error.
These are toString methods so need to print by system.out.println.

3. e.getMessage()
-----------------
This will only give the discription of error.
These are toString methods so need to print by system.out.println.



Control Flow in Try-Catch-Finaly
--------------------------------
                                try {
                                    statement-1;
                                    statement-2;
                                    statement-3;
                                }
                                catch(exception e) {
                                    statement-4;
                                }
                                finally {
                                    statement-5;
                                }
                                statement-6;
case-1 If there is no exception.
        All stateemnts will exceute. Normal terminaltion.
case-2 If exception at statement-2 and coresponding catch block matched.
        Statement-1 will execute and the xoresponding catch block statement-4 will trigger, and statement-5,6 will also execute.
case-3 If exception at statement-2 and coresponding catch block not matched.
        Statement-1 will execute, corresponding catch not found program will terminate abnormally & statement-5 will execute. Because finally always executes.
case-3 If exception raised at statement-4.
        Abnormal termination, as its not part of try block. Before this finally will be executed.
case-5 If an exception raised at statement-5.
        Outside of try block it is always abnormal termination. Even 4, 5, 6. Abnormal Termination.



Throw vs Throws
---------------

'Throw' keyword
---------------
Used for Customised, user defined exceptions. Not for pre-defined exception.
To handle our created exception object to the JVM manually.
            withdraw(double amount) {
                if(amount > balance) {
                    throw new InsufficientFundException();
                }
            }

Programmer create a custom exception object, and throw to JVM to catch it.
 
 internal working
 ----------------
        class Test {
            public static void main(String[] args) {
                System.out.println(10/0);
            }
        }
error: exception in thread "main" java.lang.ArithmeticException /by zero.
        at Test.main();

manual working/exputsitly
-------------------------
        class Test {
            public static void main(String[] args) {
                throw new ArithmeticException("/ by zero"); //created a object for exception and throw it into the JVM, manually.
                    System.out.println(10/0);
            }
        }
error: exception in thread "main" java.lang.ArithmeticException /by zero.
        at Test.main();

Cases for throw keyword
-----------------------
case-1
------
    class Test {
        static ArithmeticException ae = new ArithmeticException();
        public static void main(String[] args) {
            throw ae;
        }
    }
we get RuntimeException - ArithmeticException.
error: exception in thread "main" java.lang.ArithmeticException /by zero.
        at Test.main();

    class Test {
        static ArithmeticException ae;
        public static void main(String[] args) {
            throw ae;
        }
    }
RuntimeException - NullPointerException. because exceptions have null constructors also. Because here ae is null and not pointing towards any object.
error: exception in thread "main" java.lang.NullPointerException.
        at Test.main();

case-2
------
    class Test {
        public static void main(String[] args) {
            System.out.println(10/0);
            System.out.println("Hello");
        }
    }
we get RuntimeException - ArithmeticException.
error: exception in thread "main" java.lang.ArithmeticException /by zero.
        at Test.main();

    class Test {
        public static void main(String[] args) {
            throw new ArithmeticException("/ by zero");
                System.out.println("Hello");
        }
    }
compile time error - unrechable statement.
error: unrechable statement
    System.out.println("Hello");

case-3
------
    class Test {
        public static void main(String[] args) {
            throw new Test();
        }
    }
compile time error incompatible types found.
error: incompatible types: Test cannot be converted to throwable
        throw new Test();

throw keyword only applicable for exceptions and error. Only for throwable types.

    class Test extends RuntimeException {
        public static void main(String[] args) {
            throw new Test();
        }
    }
exception in thread "main".
error: exception in thread "main" Test
        at Test.main();


Throws keyword
--------------
To delegate(transfer) the resposibity of exception handling to the caller.
Throws keyword required only to convince compiler.
Throws only required for checked exception.

                import java.io.*;
                class Test {
                    public static void main(String[] args)
                        PrintWriter pw = new PrintWriter("abc.txt");
                        pw.println("Hello");
                }
compile time error unexcpeted exception
error: unreported exception FileNotFoundException, must cought or declare to be thrown
        PrintWriter pw = new PrintWriter("abc.txt");
    
                class Test {
                    public static void main(String[] args)
                    Thread.sleep(1000);
                        System.out.println("I spleed happily");
                }
Main thread entered into the spleep. Java give error. Because other threads will intrupt this.
error: unreported exception IntruptedException must be caught or declare to be thrown.
        at Thread.sleep(1000);

1. use try-catch to handle this situation.
                class Test {
                    public static void main(String[] args) {
                        try {
                            Thread.sleep(1000);
                        }
                        catch(IntruptedException e) {

                        }
                    }
                }

2. use throws keyword to handle.
                class Test {
                    public static void main(String[] args) throws IntruptedException() {
                        Thread.sleep(1000);
                    }
                }
Now the caller(JVM) is responsible to handle the exception.
Even though we are useing throws keyword, program can terminate abnormally. So use try catch approch to handle exceptions.



Final, Finally, Finalized
-------------------------
Final
-----
classes - no one can extend this class. If we try to extend it we get complie time error.
methods - we can't override that method in the child class.
variables - we can't change it's value, it become constant.

Finally
-------
A block associated with try-catch.
It always executed if exception occur or not.
try {
    risky code
}
catch() {
    handling code
}
finally {
    cleanup code / resource deallocation code
}

Finalized
---------
It is a method, associated with garbage collector.
If an object dosn't have any refernce variable it's always eligible for garbage collector.
Once it's executed it will destroyed by GC.